{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/documentation/core/docs/TermsAndConditionsForTheScrum.md",
    "result": {"data":{"site":{"siteMetadata":{"title":"Thoth Station Help"}},"mdx":{"id":"113c27b1-fbff-56db-b074-dce5950fd9ec","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Terms and Conditions for the Thoth Station Scrum\"), mdx(\"p\", null, \"Thoth Station Hibabitants, v0.3.0, 2021-Mar-30\"), mdx(\"p\", null, \"A scrum sprint (or iteration) is 2 weeks of calendar time, and a task should/can not span more than one sprint.\\nIf a task can not be accomplished in one sprint it must be broken up. Issues are created by the team. Issues are\\nassigned to persons (they become an assignee of the issue) when a person picks up the card and starts working on\\nit (pulls it into the \\u2018in progress\\u2019 list).\"), mdx(\"p\", null, \"An Issue must include a User Story, a list of Acceptance Criteria, (optionally) a link to a Key Result, and a\\nmeasure of complexity/time estimate. A list of References to the prior art, external documents, \\u2026 could be included.\\nTime is equivalent to the splits of an iteration, you need to deliver the complexity of an issue.\"), mdx(\"p\", null, \"Links to PRs that are implementing/fulfilling the acceptance criteria should be included as a comment on the issue.\\nIt must be present if the issue is closed.\"), mdx(\"p\", null, \"We have a list of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/orgs/thoth-station/projects\"\n  }, \"Github Projects\"), \" to cluster issues into contexts, there is no hard requirement that all issues must not be on a project, some of them can just stay\\nwithin a repository.\"), mdx(\"p\", null, \"Issues are managed on GitHub, we use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thoth-station/core/blob/master/community/labels.md\"\n  }, \"labels\"), \".\"), mdx(\"h2\", null, \"Issue Priorities\"), mdx(\"p\", null, \"An issue\\u2019s priority is mainly derived from its relation to a key result, but could also be influenced by the team.\"), mdx(\"p\", null, \"Applying any \\u201Cpriority/\\u201D label is only ok before the backlog refinement session, it shall indicate that the card is\\nimportant to the team, or important to support an upcoming key result. During the refinement session, the issue should\\nbe planned accordingly.\"), mdx(\"h2\", null, \"Backlog Refinement Session\"), mdx(\"p\", null, \"The team is refining the set and content of the issues in any \\u2018new\\u2019 or \\u2018backlog\\u2019 list of any of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/orgs/thoth-station/projects\"\n  }, \"Thoth Station Projects\"), \".\\nThe goal of the backlog refinement session is to prepare all issues to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"have a User Story\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list of high-level Acceptance Criteria/Goals (that is signed off by the team, and unchangeable)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"categorization if it is a \", \"[spike]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"checklist of detailed Acceptance Criteria (that might extend over the lifetime of the card)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(optional) a measure of complexity (story points)/time estimate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list of References\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"might have a due date assigned and confirmed by the team lead\")), mdx(\"h2\", null, \"Sprint Planning Session (experiment: integrate it with backlog refinement session)\"), mdx(\"p\", null, \"Pull the issues which support the high-level team objectives/theme and key results into the \\u2018next\\u2019 list, so that the\\nteam is clear of what is to be worked on in the next sprint.\"), mdx(\"p\", null, \"During the session, issues are open to allocation to any team member, and the team agrees to the interested team member\\nto work on the issue. If the interested team member needs to be trained to fulfill the task, then a\\ntask has to be added for training required and taken by another team member who is knowledgeable of the topic. If the training task is not feasible, another team member should\\ntake the initial task.\"), mdx(\"h2\", null, \"Scrum Standup\"), mdx(\"p\", null, \"This activity is subject to review next! We want to broaden the communication and unfreeze the behaviours of a\\nmulticultural geographically dispersed team.\"), mdx(\"p\", null, \"How do we do that?\\nMaybe by asking: Can we achieve the scrum goal? Are you Blocked? Could someone help you? Can we demo all the tasks we\\nwill have done at the end of the scrum? What can we communicate to the outside of the team at the end of the scrum?\"), mdx(\"h2\", null, \"Sprint Demo\"), mdx(\"p\", null, \"Scrum demos will be recorded and have meeting minutes. Every team member is encouraged to demo the work of the past\\nsprint. Demos are published to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/channel/UClUIDuq_hQ6vlzmqM59B2Lw\"\n  }, \"our YouTube channel\"), \".\"), mdx(\"h2\", null, \"Sprint Retrospective\"), mdx(\"p\", null, \"This activity is for reviewing what went well/not well regarding the past sprint. A discussion like what was the better\\naspect we would like to continue? What should be aspects that need more discussion as a team? What could have been a\\nbetter way to proceed?\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"srcLink":"https://github.com/thoth-station/core/blob/master/docs/TermsAndConditionsForTheScrum.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"113c27b1-fbff-56db-b074-dce5950fd9ec","previousPostId":"ae0f4c73-6d4e-5f16-8329-d6f9915cc8a8","nextPostId":"34490a62-0414-5882-9a86-da902ed34f60"}},
    "staticQueryHashes": ["2823140819","2902925331","3000541721"]}