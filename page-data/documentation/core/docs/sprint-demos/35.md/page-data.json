{
    "componentChunkName": "component---src-templates-markdown-remark-js",
    "path": "/documentation/core/docs/sprint-demos/35.md",
    "result": {"data":{"site":{"siteMetadata":{"title":"Thoth Station Help"}},"markdownRemark":{"id":"8117294a-e34b-57d9-b10a-a3833e097367","html":"<h1>Sprint 35 - 2020-Apr-14</h1>\n<h2>Topic: ArgoCD  (goern)</h2>\n<p>Cards:</p>\n<ul>\n<li><a href=\"https://trello.com/c/CYPxiLOW\">https://trello.com/c/CYPxiLOW</a></li>\n</ul>\n<p>Started working on ArgoCD and created a few Applications to play around with: <a href=\"https://github.com/thoth-station/thoth-application\">https://github.com/thoth-station/thoth-application</a> is the core application, branches in this repo reflect deployment environments (right now all are on Quicklab). Separate Applications for example for solver, as they need to go to more than one namespace.  ArgoCD uses kustomize to create manifests from the git repositories and keeps an OpenShift project in sync.</p>\n<h2>Topic: Tekton based Thoth-CI  (hnalla)</h2>\n<p>Cards:</p>\n<ul>\n<li><a href=\"https://trello.com/c/6J0ZKGzD\">https://trello.com/c/6J0ZKGzD</a></li>\n</ul>\n<p>The work on the Thoth-CI is present in: <a href=\"https://github.com/thoth-station/thoth-ci.git\">https://github.com/thoth-station/thoth-ci.git</a></p>\n<p>Thoth-CI focuses on test checks and image creation on PR to test them. Pull Request is the main focus right now, on each PR as the pipeline is triggered to serve it. The instance of the Thoth-CI is running on Quicklab cluster.  Use Thoth-CI: Attach the Webhook to Github repo: <a href=\"http://thoth-ci.aicoe.ultrahook.com/\">http://thoth-ci.aicoe.ultrahook.com/</a></p>\n<h2>Topic: Handling unsolved python packages (fmurdaca)</h2>\n<p>Cards:</p>\n<ul>\n<li><a href=\"https://trello.com/c/JW4rqDpA\">https://trello.com/c/JW4rqDpA</a></li>\n<li><a href=\"https://trello.com/c/Gct0cGSQ\">https://trello.com/c/Gct0cGSQ</a></li>\n</ul>\n<p>Acting on unresolved package_version by analysing advisor results using a new component <a href=\"https://github.com/thoth-station/advise-reporter\">https://github.com/thoth-station/advise-reporter</a>. And modifying the architecture of the Qeb-Hwt App (<a href=\"https://github.com/thoth-station/Qeb-Hwt\">https://github.com/thoth-station/Qeb-Hwt</a>).</p>\n<h2>Topic: Optimizing Thoth’s adviser (fpokorny)</h2>\n<p>Cards:</p>\n<ul>\n<li><a href=\"https://trello.com/c/BdZjrhxv/\">https://trello.com/c/BdZjrhxv/</a></li>\n<li><a href=\"https://github.com/thoth-station/fext\">https://github.com/thoth-station/fext</a></li>\n</ul>\n<p>Optimizations of the adviser’s internal structure to derive recommendations faster or bring better recommendations. We switched from the standard heap queue implementation that is provided by the standard Python library to a custom library called “fext” that is implementat as an C/C++ extension to CPython. This library is optimized for Thoth’s adviser use case when handling internal resolver states.</p>\n<h2>Topic: Repository Health Report (Proof of concept) (dominik)</h2>\n<p>Visualized Repository Health Report in form of a dashboard (using Dash). Any user that wants to see the current status of (his/her) repository, could run SrcOpsMetrics analysis locally and launch a dashboard for a quick status preview of the project.</p>\n<p>Cards:</p>\n<ul>\n<li><a href=\"https://trello.com/c/vLmnzMb\">https://trello.com/c/vLmnzMb</a> I</li>\n</ul>","fields":{"srcLink":"https://github.com/thoth-station/core/blob/master/docs/sprint-demos/35.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"8117294a-e34b-57d9-b10a-a3833e097367","previousPostId":"6c86cf23-2a0b-5228-a71b-e0946e880d46","nextPostId":"16bd562d-96a0-5f64-87ab-64c8daf108d0"}},
    "staticQueryHashes": ["1276261476","2902925331","3000541721"]}