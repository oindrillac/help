<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Thoth Station Help]]></description><link>https://thoth-station.ninja/help</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 02 May 2022 17:24:10 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[Thoth Roadmap After the current and coordinated release of Thoth's components, we started this document to outline our
current focus areas…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/ROADMAP.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/ROADMAP.md</guid><content:encoded>&lt;h1&gt;Thoth Roadmap&lt;/h1&gt;&lt;p&gt;After the current and coordinated release of Thoth’s components, we started this document to outline our
current focus areas and the major items we are working on.&lt;/p&gt;&lt;p&gt;For a more detailed overview of our current activities, have a look at our GitHub projects. We use them to plan our
sprints.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/8&quot;&gt;Thoth Knowledge Graph&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/12&quot;&gt;Amun&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/14&quot;&gt;Investigator&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/10&quot;&gt;Performance Indicators&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/2&quot;&gt;Security Indicators&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/4&quot;&gt;Adviser&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/6&quot;&gt;Solver&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/3&quot;&gt;Kebechet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/7&quot;&gt;User API&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Informative Advice&lt;/h2&gt;&lt;p&gt;Based on a &lt;a href=&quot;https://github.com/orgs/thoth-station/projects/3&quot;&gt;command line tool&lt;/a&gt; and our
&lt;a href=&quot;https://github.com/marketplace/qeb-hwt&quot;&gt;GitHub App&lt;/a&gt; we will extend the advice we give to human developers. This
extension will not only broaden the coverage of Python packages known by Thoth, but also include tips how to deploy
Python-based machine learning and data science applications.&lt;/p&gt;&lt;p&gt;The command-line tool is the base for Optimizing Deployment Pipeline.&lt;/p&gt;&lt;h2&gt;Reproducible Deployment Pipeline&lt;/h2&gt;&lt;p&gt;Integrating Thoth’s advise service, we create an optimizing and reproducible deployment pipeline for intelligent
applications running on OpenShift. This will select the best possible (based on Thoth’s knowledge graph) application
stack, apply runtime specific configuration, and will optimize machine learning models if possible.&lt;/p&gt;&lt;h2&gt;Pipelines for Reproducible Builds&lt;/h2&gt;&lt;p&gt;As a foundation to the &lt;a href=&quot;http://opendatahub.io/&quot;&gt;Open Data Hub&lt;/a&gt; and the Optimizing Reproducible Deployment Pipelines,
we host build pipelines for CUDA-enabled Jupyter Notebook container images, Thoth-enabled Python 3.6 and 3.8 builder
images and Tekton Pipeline Tasks, and accompanying documentation how to replicate these on-premise or OpenShift
deployments operated by our customers and partners.&lt;/p&gt;&lt;h2&gt;Thoth Services&lt;/h2&gt;&lt;p&gt;The following section describes the services we provide to open source projects.&lt;/p&gt;&lt;h3&gt;Kebechet GitHub Application&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/marketplace/qeb-hwt&quot;&gt;Qeb-Hwt (or Kebechet)&lt;/a&gt; is a GitHub Application we provide on GitHub’s
marketplace. It is gathering information, advice and justification based on Thoth’s Knowledge Graph per Pull Request
opened for each repository the application is enabled for. With this information presented as a Check Status, we
hope to educate human developers on their software, the changes they do in that specific pull request and what our
advice is (based on the existing knowledge). Each repository containing a Python application that is unknown to Thoth
will be used to learn new observations, as Thoth automatically extends its Knowledge Graph.&lt;/p&gt;&lt;h3&gt;Thamos command-line tool&lt;/h3&gt;&lt;p&gt;Thamos is our command-line tool to access Thoth’s Knowledge Graph, it could be run on a local directory and give
advice without hosting a repository on GitHub.&lt;/p&gt;&lt;h3&gt;Build Pipeline repository&lt;/h3&gt;&lt;p&gt;Thoth’s build pipeline repository, or Tekton Task repository, is our contribution to the
&lt;a href=&quot;https://github.com/tektoncd/catalog&quot;&gt;Tekton catalog&lt;/a&gt;, and enables Python application developers to integrate
Thoth Service consuming tasks (for example a Python module provenance check, or Security report) into their OpenShift
and Tekton Pipelines.&lt;/p&gt;&lt;h3&gt;Jupyter Requirements Management&lt;/h3&gt;&lt;p&gt;Jupyter tools focused on the Data Scientist workflow have been created to help them with dependencies management:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Jupyter Notebook extension &lt;a href=&quot;https://github.com/thoth-station/jupyter-nbrequirements&quot;&gt;jupyter-nbrequirements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JupyterLab extension &lt;a href=&quot;https://github.com/thoth-station/jupyterlab-requirements&quot;&gt;jupyterlab-requirements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;They feature similar functionality as thamos, but embedding the dependencies and the locked dependencies within the meta information
of the Jupyter Notebook file itself together with creating dependencies files in the requested requirement formats.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Terms and Conditions for the Thoth Station Scrum Thoth Station Hibabitants, v0.3.0, 2021-Mar-30 A scrum sprint (or iteration) is 2 weeks of…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/TermsAndConditionsForTheScrum.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/TermsAndConditionsForTheScrum.md</guid><content:encoded>&lt;h1&gt;Terms and Conditions for the Thoth Station Scrum&lt;/h1&gt;&lt;p&gt;Thoth Station Hibabitants, v0.3.0, 2021-Mar-30&lt;/p&gt;&lt;p&gt;A scrum sprint (or iteration) is 2 weeks of calendar time, and a task should/can not span more than one sprint.
If a task can not be accomplished in one sprint it must be broken up. Issues are created by the team. Issues are
assigned to persons (they become an assignee of the issue) when a person picks up the card and starts working on
it (pulls it into the ‘in progress’ list).&lt;/p&gt;&lt;p&gt;An Issue must include a User Story, a list of Acceptance Criteria, (optionally) a link to a Key Result, and a
measure of complexity/time estimate. A list of References to the prior art, external documents, … could be included.
Time is equivalent to the splits of an iteration, you need to deliver the complexity of an issue.&lt;/p&gt;&lt;p&gt;Links to PRs that are implementing/fulfilling the acceptance criteria should be included as a comment on the issue.
It must be present if the issue is closed.&lt;/p&gt;&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/orgs/thoth-station/projects&quot;&gt;Github Projects&lt;/a&gt; to cluster issues into contexts, there is no hard requirement that all issues must not be on a project, some of them can just stay
within a repository.&lt;/p&gt;&lt;p&gt;Issues are managed on GitHub, we use &lt;a href=&quot;https://github.com/thoth-station/core/blob/master/community/labels.md&quot;&gt;labels&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Issue Priorities&lt;/h2&gt;&lt;p&gt;An issue’s priority is mainly derived from its relation to a key result, but could also be influenced by the team.&lt;/p&gt;&lt;p&gt;Applying any “priority/” label is only ok before the backlog refinement session, it shall indicate that the card is
important to the team, or important to support an upcoming key result. During the refinement session, the issue should
be planned accordingly.&lt;/p&gt;&lt;h2&gt;Backlog Refinement Session&lt;/h2&gt;&lt;p&gt;The team is refining the set and content of the issues in any ‘new’ or ‘backlog’ list of any of &lt;a href=&quot;https://github.com/orgs/thoth-station/projects&quot;&gt;Thoth Station Projects&lt;/a&gt;.
The goal of the backlog refinement session is to prepare all issues to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;have a User Story&lt;/li&gt;&lt;li&gt;list of high-level Acceptance Criteria/Goals (that is signed off by the team, and unchangeable)&lt;/li&gt;&lt;li&gt;categorization if it is a [spike]&lt;/li&gt;&lt;li&gt;checklist of detailed Acceptance Criteria (that might extend over the lifetime of the card)&lt;/li&gt;&lt;li&gt;(optional) a measure of complexity (story points)/time estimate&lt;/li&gt;&lt;li&gt;list of References&lt;/li&gt;&lt;li&gt;might have a due date assigned and confirmed by the team lead&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Sprint Planning Session (experiment: integrate it with backlog refinement session)&lt;/h2&gt;&lt;p&gt;Pull the issues which support the high-level team objectives/theme and key results into the ‘next’ list, so that the
team is clear of what is to be worked on in the next sprint.&lt;/p&gt;&lt;p&gt;During the session, issues are open to allocation to any team member, and the team agrees to the interested team member
to work on the issue. If the interested team member needs to be trained to fulfill the task, then a
task has to be added for training required and taken by another team member who is knowledgeable of the topic. If the training task is not feasible, another team member should
take the initial task.&lt;/p&gt;&lt;h2&gt;Scrum Standup&lt;/h2&gt;&lt;p&gt;This activity is subject to review next! We want to broaden the communication and unfreeze the behaviours of a
multicultural geographically dispersed team.&lt;/p&gt;&lt;p&gt;How do we do that?
Maybe by asking: Can we achieve the scrum goal? Are you Blocked? Could someone help you? Can we demo all the tasks we
will have done at the end of the scrum? What can we communicate to the outside of the team at the end of the scrum?&lt;/p&gt;&lt;h2&gt;Sprint Demo&lt;/h2&gt;&lt;p&gt;Scrum demos will be recorded and have meeting minutes. Every team member is encouraged to demo the work of the past
sprint. Demos are published to &lt;a href=&quot;https://www.youtube.com/channel/UClUIDuq_hQ6vlzmqM59B2Lw&quot;&gt;our YouTube channel&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Sprint Retrospective&lt;/h2&gt;&lt;p&gt;This activity is for reviewing what went well/not well regarding the past sprint. A discussion like what was the better
aspect we would like to continue? What should be aspects that need more discussion as a team? What could have been a
better way to proceed?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Use Markdown Architectural Decision Records Context and Problem Statement We want to record architectural decisions made in Project Thoth…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0000-use-markdown-architectural-decision-records.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0000-use-markdown-architectural-decision-records.md</guid><content:encoded>&lt;h1&gt;Use Markdown Architectural Decision Records&lt;/h1&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;We want to record architectural decisions made in Project Thoth. Which format and structure should these records follow?&lt;/p&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://adr.github.io/madr/&quot;&gt;MADR&lt;/a&gt; 2.1.2 – The Markdown Architectural Decision Records&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions&quot;&gt;Michael Nygard’s template&lt;/a&gt; – The first incarnation of the term “ADR”&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/sustainable-architectural-design-decisions&quot;&gt;Sustainable Architectural Decisions&lt;/a&gt; – The Y-Statements&lt;/li&gt;&lt;li&gt;Other templates listed at &lt;a href=&quot;https://github.com/joelparkerhenderson/architecture_decision_record&quot;&gt;https://github.com/joelparkerhenderson/architecture_decision_record&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Formless – No conventions for file format and structure&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: “MADR 2.1.2”, because&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Implicit assumptions should be made explicit.&lt;/p&gt;&lt;p&gt;Design documentation is important to enable people understanding the decisions later on.&lt;/p&gt;&lt;p&gt;See also &lt;a href=&quot;https://doi.org/10.1109/TSE.1986.6312940&quot;&gt;A rational design process: How and why to fake it&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The MADR format is lean and fits our development style.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The MADR structure is comprehensible and facilitates usage &amp;amp; maintenance.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The MADR project is vivid.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Version 2.1.2 is the latest one available when starting to document ADRs.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Use GNU GPL as license Everything needs to be licensed, otherwise the default copyright laws apply.
For instance, in Germany that means…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0001-use-gpl3-as-license.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0001-use-gpl3-as-license.md</guid><content:encoded>&lt;h1&gt;Use GNU GPL as license&lt;/h1&gt;&lt;p&gt;Everything needs to be licensed, otherwise the default copyright laws apply.
For instance, in Germany that means users may not alter anything without explicitly asking for permission.
For more information see &lt;a href=&quot;https://help.github.com/articles/licensing-a-repository/&quot;&gt;https://help.github.com/articles/licensing-a-repository/&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We want to have all source code related to Project Thoth to be used without any hassle and as free as possible, so that
users can just &lt;a href=&quot;https://fsfe.org/freesoftware/freesoftware.en.html&quot;&gt;execute and enjoy the four freedoms&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;No license&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://creativecommons.org/share-your-work/public-domain/cc0/&quot;&gt;CC0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GNU GPL&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: “GNU GPL”, because this license supports a strong copyleft model.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Project Thoth Release Policy Status: proposed Date: 2020-Nov-04 Technical Story: As an Open Source project, we want to document the policies…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0002-release-policy.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0002-release-policy.md</guid><content:encoded>&lt;h1&gt;Project Thoth Release Policy&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Status: proposed&lt;/li&gt;&lt;li&gt;Date: 2020-Nov-04&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Technical Story: As an Open Source project, we want to document the policies and guideline on how we create a new
release.&lt;/p&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;Project Thoth itself consists of many components all having their own release cycles and delivery artifacts such as
container image or Python libraries.&lt;/p&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;a monolithic, coordinated release of all components by creating a tag within the thoth-application repository&lt;/li&gt;&lt;li&gt;have a rolling release, and no tags on any repository&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: we do a monolithic, coordinated release, because it will enable us to have a release at the
project/product level while maintianing freedom of others to update.&lt;/p&gt;&lt;h3&gt;Positive Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;users have a clear base line of versions, these versions have been tested with each other and have
undergone integration testing.&lt;/li&gt;&lt;li&gt;a release can be referenced from documents, so that operational procedures have a clear relationship with component
versions being used&lt;/li&gt;&lt;li&gt;we can maintain sets of different versions for different deployment environments&lt;/li&gt;&lt;li&gt;we can provide a version string with each API provided by the project&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Negative Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;A release might not contain the latest versions of components&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Decommission Qeb-Hwt GitHub App Status: proposed Deciders:  https://github.com/orgs/thoth-station/teams/devs Date: 2021-05-04 Technical…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0003-decommision-qeb-hwt.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0003-decommision-qeb-hwt.md</guid><content:encoded>&lt;h1&gt;Decommission Qeb-Hwt GitHub App&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Status: proposed&lt;/li&gt;&lt;li&gt;Deciders: &lt;a href=&quot;https://github.com/orgs/thoth-station/teams/devs&quot;&gt;https://github.com/orgs/thoth-station/teams/devs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Date: 2021-05-04&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Technical Story: Decommision Qeb-Hwt GitHub App&lt;/p&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/marketplace/qeb-hwt&quot;&gt;Qeb-Hwt&lt;/a&gt; is a GitHub Application which adds &lt;code class=&quot;language-text&quot;&gt;thamos advise&lt;/code&gt; based output to
Pull Requests as a check. This functionality could be integrated into &lt;a href=&quot;https://github.com/marketplace/khebhut&quot;&gt;https://github.com/marketplace/khebhut&lt;/a&gt; and
complexity and maintain costs.&lt;/p&gt;&lt;h2&gt;Decision Drivers &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;cost of maintaining Qeb-Hwt code and app&lt;/li&gt;&lt;li&gt;redundancy of infrastructure&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;keep and maintain Qeb-Hwt&lt;/li&gt;&lt;li&gt;merge function into Khebhut&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: “merge function into Khebhut”, because we can reduce the cost of maintaining our software infrastructure
by reducing redundancy.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Project Thoth Naming Convention Schema for Images Status: proposed Date: 2021-Jun-17 Technical Story: As Thoth goal to provide curated stack…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0004-naming-convention-images.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0004-naming-convention-images.md</guid><content:encoded>&lt;h1&gt;Project Thoth Naming Convention Schema for Images&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Status: proposed&lt;/li&gt;&lt;li&gt;Date: 2021-Jun-17&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Technical Story: As Thoth goal to provide curated stack and images, it would be nice to have a convention for naming of the images.&lt;/p&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;Image names are important for branding and let others identify easily a specific image they need. For example “I want to work on computer vision project with Tensorflow, what stack and image should I use?” Having a trusted well maintained source of images with clean naming convention can help on that.&lt;/p&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;s2i-{application}&lt;/code&gt; standard name currently, but not everyone knows what S2I is.&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;odh-{application}&lt;/code&gt; for branding/marketing having ODH in front seems to be the best solution, in this way the name will be shorter as well.&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ps-{application}&lt;/code&gt; as it shows what our intention is: we want to provide a curated/predictable software stack, it might be used by ODH or RHODS or others, it might use S2I or other technology. Moreover helps from pipeline creation point of view, because the length of repo name on quay can crate issues.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These names are for the core repository name, then &lt;code class=&quot;language-text&quot;&gt;overlays&lt;/code&gt; will allow for combinations of libraries based on other criteria, for example &lt;code class=&quot;language-text&quot;&gt;ml_framework&lt;/code&gt; and/or &lt;code class=&quot;language-text&quot;&gt;hardware&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;`ps-nlp`
├── overlays                    # Overlays structure for builds
│   ├── ps-nlp-tensorflow          # NLP image with TensorFlow ML framework
│   ├── ps-nlp-tensorflow-gpu      # NLP image with TensorFlow ML framework for GPU
│   ├── ps-nlp-pytorch             # NLP image with Pytorch ML framework
│   ├── ps-nlp-pytorch-gpu         # NLP image with Pytorch ML framework for GPU
│   └── ps-nlp-scikit-learn        # NLP image with Scikit-learn ML framework
└── ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Selected option: &lt;code class=&quot;language-text&quot;&gt;ps-{application}&lt;/code&gt; as it shows what our intention is: we want to provide a curated/predictable software stack, it might be used by ODH or RHODS or others, it might use S2I or other technology. Moreover helps from pipeline creation point of view, because the length of repo name on quay can crate issues.&lt;/p&gt;&lt;h3&gt;Positive Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;users can immediately select an image based on the application they want.&lt;/li&gt;&lt;li&gt;using overlays we can have a variety of combination, not just for ml_framework&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Negative Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;N/A&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Automatically bump the version of base images used to generate container images Status: proposed Date: 2022-02-15 Technical Story: As a…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/0005-automatically-bump-container-image-versions.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/0005-automatically-bump-container-image-versions.md</guid><content:encoded>&lt;h1&gt;Automatically bump the version of base images used to generate container images&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Status: proposed&lt;/li&gt;&lt;li&gt;Date: 2022-02-15&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Technical Story: As a maintainer of Thoth, I would like to automatically update the version of the base images used to generate new container images of some components (see: &lt;a href=&quot;https://github.com/thoth-station/kebechet/issues/991&quot;&gt;https://github.com/thoth-station/kebechet/issues/991&lt;/a&gt;)&lt;/p&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;When new base image versions used to genereate container images for Thoth components are released on Quay, it would be practical to update them automatically instead of manually opening &lt;code class=&quot;language-text&quot;&gt;Bump &amp;lt;component name&amp;gt; to vx.y.z in &amp;lt;environment&amp;gt;&lt;/code&gt; pull requests in the concerned repositories (Example: &lt;a href=&quot;https://github.com/thoth-station/thoth-application/pull/2314&quot;&gt;https://github.com/thoth-station/thoth-application/pull/2314&lt;/a&gt;).&lt;/p&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Implement a simple Python script to bump the base image versions used to deliver container images in &lt;code class=&quot;language-text&quot;&gt;.aicoe-ci.yaml&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.thoth.yaml&lt;/code&gt; or similar files for eventual uses outside of the project.&lt;ul&gt;&lt;li&gt;1) Integrate this script in the AICoE-CI pipeline logic&lt;/li&gt;&lt;li&gt;2) Integrate this script in Kebechet&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: 1). For the moment, this script has been integrated in the AICoE-CI pipeline logic, but it could eventually be reused in Kebechet if needed.&lt;/p&gt;&lt;h3&gt;Positive Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Keeping the base image versions we use up-to-date for active repositories.&lt;/li&gt;&lt;li&gt;Base image version updates are made automatically, which is less error-prone and time-consuming for developers compared to making the update manually.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Links &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Current action items and building blocks proposal: &lt;a href=&quot;https://github.com/thoth-station/kebechet/issues/991#issuecomment-1039220686&quot;&gt;https://github.com/thoth-station/kebechet/issues/991#issuecomment-1039220686&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Script implementation in &lt;code class=&quot;language-text&quot;&gt;pipeline-helpers&lt;/code&gt;: &lt;a href=&quot;https://github.com/thoth-station/pipeline-helpers/pull/45&quot;&gt;https://github.com/thoth-station/pipeline-helpers/pull/45&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Script integration in the &lt;code class=&quot;language-text&quot;&gt;aicoe-ci&lt;/code&gt; pipeline logic: &lt;a href=&quot;https://github.com/AICoE/aicoe-ci/pull/170&quot;&gt;https://github.com/AICoE/aicoe-ci/pull/170&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Demo: &lt;a href=&quot;https://www.youtube.com/watch?v=Uwc7WS4SnL4&amp;amp;t=2s&amp;amp;ab_channel=ThothStation&quot;&gt;https://www.youtube.com/watch?v=Uwc7WS4SnL4&amp;amp;t=2s&amp;amp;ab_channel=ThothStation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[short title of solved problem and solution Status: [proposed | rejected | accepted | deprecated | … | superseded by  ADR-0005 ]  Deciders…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/adr/template.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/adr/template.md</guid><content:encoded>&lt;h1&gt;[short title of solved problem and solution]&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Status: [proposed | rejected | accepted | deprecated | … | superseded by &lt;a href=&quot;0005-example.md&quot;&gt;ADR-0005&lt;/a&gt;] &lt;/li&gt;&lt;li&gt;Deciders: [list everyone involved in the decision] &lt;/li&gt;&lt;li&gt;Date: [YYYY-MM-DD when the decision was last updated] &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Technical Story: [description | ticket/issue URL] &lt;/p&gt;&lt;h2&gt;Context and Problem Statement&lt;/h2&gt;&lt;p&gt;[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]&lt;/p&gt;&lt;h2&gt;Decision Drivers &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;[driver 1, e.g., a force, facing concern, …]&lt;/li&gt;&lt;li&gt;[driver 2, e.g., a force, facing concern, …]&lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Considered Options&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;[option 1]&lt;/li&gt;&lt;li&gt;[option 2]&lt;/li&gt;&lt;li&gt;[option 3]&lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Decision Outcome&lt;/h2&gt;&lt;p&gt;Chosen option: ”[option 1]”, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].&lt;/p&gt;&lt;h3&gt;Positive Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;[e.g., improvement of quality attribute satisfaction, follow-up decisions required, …]&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Negative Consequences &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;[e.g., compromising quality attribute, follow-up decisions required, …]&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Pros and Cons of the Options &lt;/h2&gt;&lt;h3&gt;[option 1]&lt;/h3&gt;&lt;p&gt;[example | description | pointer to more information | …] &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good, because [argument a]&lt;/li&gt;&lt;li&gt;Good, because [argument b]&lt;/li&gt;&lt;li&gt;Bad, because [argument c]&lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;[option 2]&lt;/h3&gt;&lt;p&gt;[example | description | pointer to more information | …] &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good, because [argument a]&lt;/li&gt;&lt;li&gt;Good, because [argument b]&lt;/li&gt;&lt;li&gt;Bad, because [argument c]&lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;[option 3]&lt;/h3&gt;&lt;p&gt;[example | description | pointer to more information | …] &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good, because [argument a]&lt;/li&gt;&lt;li&gt;Good, because [argument b]&lt;/li&gt;&lt;li&gt;Bad, because [argument c]&lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Links &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;[Link type][Link to ADR] &lt;/li&gt;&lt;li&gt;… &lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Inferring package names out of Python imports Assigned intern: Tlegen
Assigned mentor: Francesco Murdaca Project Goal The goal of this…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/intern-projects/Inferring-package-names-out-of-Python-imports.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/intern-projects/Inferring-package-names-out-of-Python-imports.md</guid><content:encoded>&lt;h1&gt;Inferring package names out of Python imports&lt;/h1&gt;&lt;p&gt;Assigned intern: Tlegen
Assigned mentor: Francesco Murdaca&lt;/p&gt;&lt;h2&gt;Project Goal&lt;/h2&gt;&lt;p&gt;The goal of this project is to create an automated mechanism for inferring package names out of their imports.&lt;/p&gt;&lt;h2&gt;Deliverables&lt;/h2&gt;&lt;p&gt;An endpoint on User API that can suggest package names based on an import supplied.&lt;/p&gt;&lt;h2&gt;Prerequisites for Team Members&lt;/h2&gt;&lt;p&gt;Please check you have all the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Be part of Thoth-Station Google Chat Room&lt;/li&gt;&lt;li&gt;Be part of Thoth scrum meetings&lt;/li&gt;&lt;li&gt;Access to GitHub using your GitHub your account: &lt;a href=&quot;https://github.com/thoth-station&quot;&gt;Thoth Station&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project outline&lt;/h2&gt;&lt;ol start=&quot;0&quot;&gt;&lt;li&gt;Welcome to the Thoth Station!&lt;/li&gt;&lt;li&gt;Get familiar with &lt;a href=&quot;https://github.com/thoth-station/core/blob/master/README.rst&quot;&gt;how we work&lt;/a&gt;&lt;ol&gt;&lt;li&gt;Get familiar with team members&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with &lt;a href=&quot;https://github.com/thoth-station/solver/&quot;&gt;thoth-solver&lt;/a&gt;, study its output&lt;/li&gt;&lt;li&gt;Get familiar with &lt;a href=&quot;https://github.com/thoth-station/invectio&quot;&gt;invectio&lt;/a&gt;, study its output&lt;/li&gt;&lt;li&gt;Check available results of thoth-solver runs that are present on Ceph, use Jupyter Notebooks to explore the dataset&lt;ol&gt;&lt;li&gt;Make sure you have access to Ceph and data are readable&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Check packages in the ecosystem that provide modules under a different name than the package name itself&lt;ol&gt;&lt;li&gt;See import sklearn vs pip install &lt;a href=&quot;https://pypi.org/project/scikit-learn/&quot;&gt;scikit-learn&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Design and propose a solution that can automatically derive module names&lt;ol&gt;&lt;li&gt;No need to strictly use thoth-solver data if a better solution is found&lt;/li&gt;&lt;li&gt;Mind “namespaced” modules&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Write a program that can automatically derive package names out of imports&lt;ol&gt;&lt;li&gt;Design a database that can hold such information, if needed&lt;/li&gt;&lt;li&gt;Design an approach to sync required data into the database&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with Thoth deployment, design and propose integration of your application into the system&lt;ol&gt;&lt;li&gt;Study Argo workflows, check how the proposed solution can be integrated into the system (e.g. run it after solver finishes)&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Integrate your solution into Thoth&lt;ol&gt;&lt;li&gt;Adjust templates in thoth-station/thoth-application repository&lt;/li&gt;&lt;li&gt;Provide an endpoint on &lt;a href=&quot;https://github.com/thoth-station/user-api/&quot;&gt;user-api&lt;/a&gt; that can give information to users about imports Input: import Output: Package name (package required to be installed so that import works)&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Create an &lt;a href=&quot;https://github.com/thoth-station/integration-tests/&quot;&gt;integration test&lt;/a&gt; verifying the endpoint implemented&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Stretch goals&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Create a small Python application that can check how similar two project names are, discuss its usability for detecting typosquatting&lt;/li&gt;&lt;li&gt;Create a new Kebechet manager using new logic (&lt;a href=&quot;https://github.com/thoth-station/kebechet/issues/727&quot;&gt;https://github.com/thoth-station/kebechet/issues/727&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Classify errors produced during installation of Python modules Assigned intern: Bjoern Hasemann
Assigned mentor: Frido Pokorny Project Goal…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/intern-projects/classify-errors-produced-during-installation-of-python-modules.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/intern-projects/classify-errors-produced-during-installation-of-python-modules.md</guid><content:encoded>&lt;h1&gt;Classify errors produced during installation of Python modules&lt;/h1&gt;&lt;p&gt;Assigned intern: Bjoern Hasemann
Assigned mentor: Frido Pokorny&lt;/p&gt;&lt;h2&gt;Project Goal&lt;/h2&gt;&lt;p&gt;The goal of this project is to create a classifier that can classify errors reported during Python package installation. This classifier will be used in thoth-solver errors classification as well as in build analysis.&lt;/p&gt;&lt;h2&gt;Deliverables&lt;/h2&gt;&lt;p&gt;A Jupyter Notebook, later an CLI application, that can automatically classify error logs.&lt;/p&gt;&lt;h2&gt;Prerequisites for Team Members&lt;/h2&gt;&lt;p&gt;Please check you have all the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Access to Red Hat network&lt;/li&gt;&lt;li&gt;Access to GMail and Google Chat&lt;ul&gt;&lt;li&gt;Be part of Thoth-Station Google Chat Room&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be part of Thoth scrum meetings&lt;ul&gt;&lt;li&gt;You should receive an invite to a Google calendar Event&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Access to GitHub using your GitHub your account&lt;ul&gt;&lt;li&gt;Thoth Station&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Get access to JupyterHub&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://odh.operate-first.cloud/&quot;&gt;https://odh.operate-first.cloud/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project outline&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Welcome to the Thoth Station!&lt;ol&gt;&lt;li&gt;get familiar with team members&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with thoth-solver [1], study its output&lt;/li&gt;&lt;li&gt;Get familiar with micropipenv [2], study its output&lt;/li&gt;&lt;li&gt;Get familiar with Amun service and inspections that are run there [4]&lt;/li&gt;&lt;li&gt;Get access to solver dataset that is present on Ceph, explore the dataset using Jupyter Notebooks, create a batch of solver documents that capture failed solver runs with the error log reported&lt;ol&gt;&lt;li&gt;You can also check available datasets on Kaggle [3] and GitHub [4]&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Similarly to the previous point, get access to inspection dataset&lt;/li&gt;&lt;li&gt;Design and propose a solution that will automatically or semi-automatically classify errors, discuss the proposed solution with the team&lt;ol&gt;&lt;li&gt;Discuss algorithm used&lt;/li&gt;&lt;li&gt;Discuss how the solution can be applied to solver errors and errors in inspection build logs&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Create a generic Jupyter Notebook that accepts a list of solver documents and classifies them automatically&lt;ol&gt;&lt;li&gt;Check already implemented classifier, propose improvements or reuse parts&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Create a generic Jupyter Notebook that accepts a list of inspections and automatically classifies them&lt;ol&gt;&lt;li&gt;Discuss how the error is extracted&lt;/li&gt;&lt;li&gt;Study buildlog-parser, think of its reusability [6]&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Discuss correctness and applicability of the proposed solution&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Stretch goals:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Study solver workflow and how it works in Thoth deployment, try to come up with a design on how to integrate your solution into solver workflow&lt;/li&gt;&lt;li&gt;Integrate your solution into solver workflow&lt;/li&gt;&lt;li&gt;Extend error classification to classify also errors specific to Amun inspections (e.g. failed push of images)&lt;/li&gt;&lt;li&gt;Study buildlog analysis endpoint and build analysis workflow&lt;/li&gt;&lt;li&gt;Integrate your solution into buildlog analysis workflow&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/solver/&quot;&gt;https://github.com/thoth-station/solver/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/micropipenv&quot;&gt;https://github.com/thoth-station/micropipenv&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.kaggle.com/thothstation/thoth-solver-dataset-v10&quot;&gt;https://www.kaggle.com/thothstation/thoth-solver-dataset-v10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/datasets&quot;&gt;https://github.com/thoth-station/datasets&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/amun-api/&quot;&gt;https://github.com/thoth-station/amun-api/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/buildlog-parser&quot;&gt;https://github.com/thoth-station/buildlog-parser&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/report-processing&quot;&gt;https://github.com/thoth-station/report-processing&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Previous attempts to learn from&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;sraghura&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://bluejeans.com/playback/s/z6ZEf27gKasWfJqXtkzJYkg1YpwnBcTDLkB9TLYuU5SSgaDVi51tYIlAtyfCKDeW&quot;&gt;https://bluejeans.com/playback/s/z6ZEf27gKasWfJqXtkzJYkg1YpwnBcTDLkB9TLYuU5SSgaDVi51tYIlAtyfCKDeW&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/notebooks/blob/master/notebooks/development/Solver%20error%20classification.ipynb&quot;&gt;https://github.com/thoth-station/notebooks/blob/master/notebooks/development/Solver%20error%20classification.ipynb&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;skotak&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1SAzyxxfXpRf7bnuuF4Eva6EXXdUcRqWhrfBOYQfiWk8/edit#&quot;&gt;https://docs.google.com/document/d/1SAzyxxfXpRf7bnuuF4Eva6EXXdUcRqWhrfBOYQfiWk8/edit#&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1lB4GBAvhp6ZFbafgYvBGnf1C-aTjzkXK0VrOfs_Skxo/edit#slide=id.g8c299ddf99_1_950&quot;&gt;https://docs.google.com/presentation/d/1lB4GBAvhp6ZFbafgYvBGnf1C-aTjzkXK0VrOfs_Skxo/edit#slide=id.g8c299ddf99_1_950&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bluejeans.com/s/8UYPQ&quot;&gt;https://bluejeans.com/s/8UYPQ&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1bVXHEvTojSXzSlUcrRNS3DcT_NeSg0nvZcREDUIHPBs/edit#slide=id.g8c299ddf99_1_950&quot;&gt;https://docs.google.com/presentation/d/1bVXHEvTojSXzSlUcrRNS3DcT_NeSg0nvZcREDUIHPBs/edit#slide=id.g8c299ddf99_1_950&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Detect license of Python modules Assigned intern: Viliam Podhajecký
Assigned mentor: Frido Pokorny Project Goal The goal of this project is…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/intern-projects/detecting-lincenses-of-python-modules.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/intern-projects/detecting-lincenses-of-python-modules.md</guid><content:encoded>&lt;h1&gt;Detect license of Python modules&lt;/h1&gt;&lt;p&gt;Assigned intern: Viliam Podhajecký
Assigned mentor: Frido Pokorny&lt;/p&gt;&lt;h2&gt;Project Goal&lt;/h2&gt;&lt;p&gt;The goal of this project is to detect license of Python modules.&lt;/p&gt;&lt;h2&gt;Deliverables&lt;/h2&gt;&lt;p&gt;A Jupyter Notebook, later an CLI application, that can automatically detect
license information of Python modules. This CLI application is then integrated
into the system and automatically detects license information of Python modules
analyzed.&lt;/p&gt;&lt;h2&gt;Prerequisites for Team Members&lt;/h2&gt;&lt;p&gt;Please check you have all the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Access to Red Hat network&lt;/li&gt;&lt;li&gt;Access to GMail and Google Chat&lt;ul&gt;&lt;li&gt;Be part of Thoth-Station Google Chat Room&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be part of Thoth scrum meetings&lt;ul&gt;&lt;li&gt;You should receive an invite to a Google calendar Event&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Access to GitHub using your GitHub your account&lt;ul&gt;&lt;li&gt;Thoth Station&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Get access to JupyterHub&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://odh.operate-first.cloud/&quot;&gt;https://odh.operate-first.cloud/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project outline&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Welcome to the Thoth Station!&lt;/p&gt;&lt;ol&gt;&lt;li&gt;get familiar with team members&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Get familiar with thoth-solver [1], study its output&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Get access to solver dataset that is present on Ceph, explore the dataset
using Jupyter Notebooks, create a batch of solver documents, see &lt;a href=&quot;https://github.com/orgs/thoth-station/projects/21#card-64687425&quot;&gt;https://github.com/orgs/thoth-station/projects/21#card-64687425&lt;/a&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;You can also check available datasets on Kaggle [2] and GitHub [3]&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Design and propose a solution that will automatically or semi-automatically
classify license of Python modules, discuss the proposed solution with the
team&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Discuss algorithm used and source of license information&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Check existing solutions that work with solver dataset ([4] and [5]) and
study how they work to acquire possible inspiration&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Check license information in package metadata (eigher in &lt;code class=&quot;language-text&quot;&gt;license&lt;/code&gt;
field or check license specific trove classifiers) - see [7], [8] and
[9] for more info&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Create a generic Jupyter Notebook that accepts a list of solver documents
and extracts license information&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Convert the created Jupyter Notebook into a CLI&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Discuss correctness and applicability of the proposed solution&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Integrate the created CLI into the system (“solver” workflow)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Sync license information into the database (see thoth-storages module)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Design a wrap adviser pipeline unit [6] in adviser that provides license
information to users&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Stretch goals&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Detect and infer license information from dual licensed projects&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/solver/&quot;&gt;https://github.com/thoth-station/solver/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.kaggle.com/thothstation/thoth-solver-dataset-v10&quot;&gt;https://www.kaggle.com/thothstation/thoth-solver-dataset-v10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/datasets&quot;&gt;https://github.com/thoth-station/datasets&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/prescriptions-gh-release-notes-job&quot;&gt;https://github.com/thoth-station/prescriptions-gh-release-notes-job&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/solver-project-url-job/&quot;&gt;https://github.com/thoth-station/solver-project-url-job/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/wraps.html&quot;&gt;https://thoth-station.ninja/docs/developers/adviser/wraps.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://packaging.python.org/guides/distributing-packages-using-setuptools/#license&quot;&gt;https://packaging.python.org/guides/distributing-packages-using-setuptools/#license&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://packaging.python.org/guides/distributing-packages-using-setuptools/#classifiers&quot;&gt;https://packaging.python.org/guides/distributing-packages-using-setuptools/#classifiers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://pypi.org/classifiers/&quot;&gt;https://pypi.org/classifiers/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Generate prescriptions from text (text2prescription) Assigned intern: ??
Assigned mentor: ?? Project Goal The goal of this research project…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/intern-projects/generate-prescription-from-text.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/intern-projects/generate-prescription-from-text.md</guid><content:encoded>&lt;h1&gt;Generate prescriptions from text (text2prescription)&lt;/h1&gt;&lt;p&gt;Assigned intern: ??
Assigned mentor: ??&lt;/p&gt;&lt;h2&gt;Project Goal&lt;/h2&gt;&lt;p&gt;The goal of this research project is to create text2prescription model that can be used in a bot for generating prescriptions to heal Python Projects from text inputs.&lt;/p&gt;&lt;h2&gt;Deliverables&lt;/h2&gt;&lt;p&gt;A Jupyter Notebook, later an CLI application, that can automatically generate prescriptions from text input.&lt;/p&gt;&lt;h2&gt;Prerequisites for Team Members&lt;/h2&gt;&lt;p&gt;Please check you have all the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Access to Operate First&lt;/li&gt;&lt;li&gt;Access to GMail and Google Chat&lt;ul&gt;&lt;li&gt;Be part of Thoth-Station Google Chat Room&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be part of Thoth scrum meetings&lt;ul&gt;&lt;li&gt;You should receive an invite to a Google calendar Event&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Access to GitHub using your GitHub your account&lt;ul&gt;&lt;li&gt;Thoth Station&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Get access to JupyterHub&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://odh.operate-first.cloud/&quot;&gt;https://odh.operate-first.cloud/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project outline&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Welcome to the Thoth Station! [1]&lt;ol&gt;&lt;li&gt;get familiar with team members&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with adviser [2], study how it works [3].&lt;/li&gt;&lt;li&gt;Get familiar with prescriptions [4][5], study how they are created [6].&lt;/li&gt;&lt;li&gt;Research methods for mapping text to templates (e.g. prescription).&lt;/li&gt;&lt;li&gt;Create NLP pipeline to analyze Text inputs (using Elyra [7] and Kubeflow Pipelines[8] available on Operate First).&lt;/li&gt;&lt;li&gt;Create NLP model for entity recognition from text specific to prescriptions. (e.g. Python package, runtime environment, hardware).&lt;/li&gt;&lt;li&gt;Create a Jupyter Notebook that accepts text and produce prescription (.yaml format).&lt;ol&gt;&lt;li&gt;Discuss NLP pipeline steps.&lt;/li&gt;&lt;li&gt;Discuss NLP model for entity recognition specific to prescriptions.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Discuss applicability and use of this new approach (e.g. bot supporting users that want to create a prescription for Python application)&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Stretch goals:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Create a bot that can receive text from an issue as input and create a pull request with prescriptions&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://thoth-station.ninja/&quot;&gt;https://thoth-station.ninja/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/adviser&quot;&gt;https://github.com/thoth-station/adviser&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://developers.redhat.com/articles/2021/09/22/thoth-prescriptions-resolving-python-dependencies#&quot;&gt;https://developers.redhat.com/articles/2021/09/22/thoth-prescriptions-resolving-python-dependencies#&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/prescriptions&quot;&gt;https://github.com/thoth-station/prescriptions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/index.html#pipeline-units&quot;&gt;https://thoth-station.ninja/docs/developers/adviser/index.html#pipeline-units&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OCX8JQDXP9s&quot;&gt;https://www.youtube.com/watch?v=OCX8JQDXP9s&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/elyra-ai/elyra&quot;&gt;https://github.com/elyra-ai/elyra&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.kubeflow.org/docs/components/pipelines/overview/pipelines-overview/&quot;&gt;https://www.kubeflow.org/docs/components/pipelines/overview/pipelines-overview/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Bootstrap database of Thoth prescriptions Assigned intern:
Assigned mentor: Project Goal The goal of this project is to extend the current…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/intern-projects/prescriptions-bootstrap.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/intern-projects/prescriptions-bootstrap.md</guid><content:encoded>&lt;h1&gt;Bootstrap database of Thoth prescriptions&lt;/h1&gt;&lt;p&gt;Assigned intern:
Assigned mentor:&lt;/p&gt;&lt;h2&gt;Project Goal&lt;/h2&gt;&lt;p&gt;The goal of this project is to extend the current database of prescriptions
with known or not yet known issues in the Python ecosystem.&lt;/p&gt;&lt;h2&gt;Deliverables&lt;/h2&gt;&lt;p&gt;Set of YAML files committed to
&lt;a href=&quot;https://github.com/thoth-station/prescriptions&quot;&gt;thoth-station/prescriptions&lt;/a&gt;
repository that help the recommender system to advise better software stacks to
users.&lt;/p&gt;&lt;h2&gt;Prerequisites for Team Members&lt;/h2&gt;&lt;p&gt;Please check you have all the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Be part of Thoth-Station Google Chat Room&lt;/li&gt;&lt;li&gt;Be part of Thoth scrum meetings&lt;ul&gt;&lt;li&gt;You should receive an invite to a Google calendar Event&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Access to GitHub using your GitHub your account&lt;ul&gt;&lt;li&gt;Thoth Station&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project outline&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Welcome to the Thoth Station!&lt;ol&gt;&lt;li&gt;get familiar with team members&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with &lt;a href=&quot;https://github.com/thoth-station/prescriptions&quot;&gt;thoth-station/prescriptions&lt;/a&gt; repository&lt;/li&gt;&lt;li&gt;Get familiar with prescriptions concept, follow the &lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/prescription.html&quot;&gt;online documentation for more info&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Identify popular Python packages that can be valuable to data scientists and Python developers&lt;ol&gt;&lt;li&gt;Take a look at already existing &lt;a href=&quot;https://github.com/thoth-station/init-job/blob/master/hundredsDatasciencePackages.yaml&quot;&gt;hundredsDatasciencePackages&lt;/a&gt; list&lt;/li&gt;&lt;li&gt;Take a look at Python packages based on their popularity (number of downloads from PyPI)&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;For the identified set of Python packages create prescriptions that add knowledge to the recommender system so that users do not encounter known issues&lt;ol&gt;&lt;li&gt;Follow project issues and/or project release notes&lt;/li&gt;&lt;li&gt;Collaborate with communities to understand issues and required fixes, present prescriptions concept to communities&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Get familiar with &lt;a href=&quot;https://github.com/thoth-station/amun-api&quot;&gt;Amun&lt;/a&gt; service and &lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/dependency_monkey.html&quot;&gt;Dependency Monkey&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Identify possible cases that are suitable for running Dependency Monkey to spot issues in packages or runtime environments&lt;/li&gt;&lt;li&gt;Run Dependency Monkey jobs and/or Amun inspections to conduct experiments that can result in new prescriptions&lt;ol&gt;&lt;li&gt;Discuss possible issues with upstream communities&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Discuss extensibility and possible improvements that would help you to get results more effectively&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/prescriptions&quot;&gt;https://github.com/thoth-station/prescriptions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/prescription.html&quot;&gt;https://thoth-station.ninja/docs/developers/adviser/prescription.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://thoth-station.ninja/docs/developers/adviser/dependency_monkey.html&quot;&gt;https://thoth-station.ninja/docs/developers/adviser/dependency_monkey.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/amun-api&quot;&gt;https://github.com/thoth-station/amun-api&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Sprint 35 - 2020-Apr-14 Topic: ArgoCD  (goern) Cards: https://trello.com/c/CYPxiLOW Started working on ArgoCD and created a few Applications…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/35.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/35.md</guid><content:encoded>&lt;h1&gt;Sprint 35 - 2020-Apr-14&lt;/h1&gt;&lt;h2&gt;Topic: ArgoCD  (goern)&lt;/h2&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/CYPxiLOW&quot;&gt;https://trello.com/c/CYPxiLOW&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Started working on ArgoCD and created a few Applications to play around with: &lt;a href=&quot;https://github.com/thoth-station/thoth-application&quot;&gt;https://github.com/thoth-station/thoth-application&lt;/a&gt; is the core application, branches in this repo reflect deployment environments (right now all are on Quicklab). Separate Applications for example for solver, as they need to go to more than one namespace.  ArgoCD uses kustomize to create manifests from the git repositories and keeps an OpenShift project in sync.&lt;/p&gt;&lt;h2&gt;Topic: Tekton based Thoth-CI  (hnalla)&lt;/h2&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/6J0ZKGzD&quot;&gt;https://trello.com/c/6J0ZKGzD&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The work on the Thoth-CI is present in: &lt;a href=&quot;https://github.com/thoth-station/thoth-ci.git&quot;&gt;https://github.com/thoth-station/thoth-ci.git&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thoth-CI focuses on test checks and image creation on PR to test them. Pull Request is the main focus right now, on each PR as the pipeline is triggered to serve it. The instance of the Thoth-CI is running on Quicklab cluster.  Use Thoth-CI: Attach the Webhook to Github repo: &lt;a href=&quot;http://thoth-ci.aicoe.ultrahook.com/&quot;&gt;http://thoth-ci.aicoe.ultrahook.com/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Topic: Handling unsolved python packages (fmurdaca)&lt;/h2&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/JW4rqDpA&quot;&gt;https://trello.com/c/JW4rqDpA&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/Gct0cGSQ&quot;&gt;https://trello.com/c/Gct0cGSQ&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Acting on unresolved package_version by analysing advisor results using a new component &lt;a href=&quot;https://github.com/thoth-station/advise-reporter&quot;&gt;https://github.com/thoth-station/advise-reporter&lt;/a&gt;. And modifying the architecture of the Qeb-Hwt App (&lt;a href=&quot;https://github.com/thoth-station/Qeb-Hwt&quot;&gt;https://github.com/thoth-station/Qeb-Hwt&lt;/a&gt;).&lt;/p&gt;&lt;h2&gt;Topic: Optimizing Thoth’s adviser (fpokorny)&lt;/h2&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/BdZjrhxv/&quot;&gt;https://trello.com/c/BdZjrhxv/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/fext&quot;&gt;https://github.com/thoth-station/fext&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Optimizations of the adviser’s internal structure to derive recommendations faster or bring better recommendations. We switched from the standard heap queue implementation that is provided by the standard Python library to a custom library called “fext” that is implementat as an C/C++ extension to CPython. This library is optimized for Thoth’s adviser use case when handling internal resolver states.&lt;/p&gt;&lt;h2&gt;Topic: Repository Health Report (Proof of concept) (dominik)&lt;/h2&gt;&lt;p&gt;Visualized Repository Health Report in form of a dashboard (using Dash). Any user that wants to see the current status of (his/her) repository, could run SrcOpsMetrics analysis locally and launch a dashboard for a quick status preview of the project.&lt;/p&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/vLmnzMb&quot;&gt;https://trello.com/c/vLmnzMb&lt;/a&gt; I&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Sprint 37 - 2020-May-08 Topic: ArgoCD: Thoth-application (goern) See  https://argocd-server-aicoe-argocd.apps.ocp.prod.psi.redhat.com…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/37.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/37.md</guid><content:encoded>&lt;h1&gt;Sprint 37 - 2020-May-08&lt;/h1&gt;&lt;h2&gt;Topic: ArgoCD: Thoth-application (goern)&lt;/h2&gt;&lt;p&gt;See &lt;a href=&quot;https://argocd-server-aicoe-argocd.apps.ocp.prod.psi.redhat.com/applications&quot;&gt;https://argocd-server-aicoe-argocd.apps.ocp.prod.psi.redhat.com/applications&lt;/a&gt; for all the thoth application components deployed to thoth01 (quicklab==test) cluster. Using sops/ksops to encrypt and decrypt secrets.&lt;/p&gt;&lt;h2&gt;Topic: Publish s2i migration tool (frido)&lt;/h2&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/PtDSoa0T&quot;&gt;https://trello.com/c/PtDSoa0T&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Topic: Updates on Thoth-CI (hnalla)&lt;/h2&gt;&lt;h3&gt;New Feature&lt;/h3&gt;&lt;p&gt;Tag based release of image of the application slash-command to interact with the thoth-ci.
&lt;code class=&quot;language-text&quot;&gt;/approve&lt;/code&gt; : To merge a pr on merge.&lt;/p&gt;&lt;p&gt;CI focuses on test checks and image creation on PR to test them. Pull Request is the main focus right now, on each PR as the pipeline is triggered to serve it. The instance of the Thoth-CI is running on Quicklab cluster. Developers can interact with the CI for ease of operations.&lt;/p&gt;&lt;p&gt;Use Thoth-CI: Attach the Webhook to Github repo: &lt;a href=&quot;http://thoth-ci.aicoe.ultrahook.com&quot;&gt;http://thoth-ci.aicoe.ultrahook.com&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Topic: Bandit Security Benchmark (kpostlet)&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Sprint 38 - 2020-May-22 Topic: Bandit Security Benchmark (kpostlet) Find us on YouTube:  https://bit.ly/thoth-sprint-38 Topic: SLO reporter…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/38.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/38.md</guid><content:encoded>&lt;h1&gt;Sprint 38 - 2020-May-22&lt;/h1&gt;&lt;h2&gt;Topic: Bandit Security Benchmark (kpostlet)&lt;/h2&gt;&lt;p&gt;Find us on YouTube: &lt;a href=&quot;https://bit.ly/thoth-sprint-38&quot;&gt;https://bit.ly/thoth-sprint-38&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Topic: SLO reporter (fmurdaca)&lt;/h2&gt;&lt;p&gt;Service Level Objective (SLO) reporter and the mails it’s sending out. Data is read form thanos (hosted by internal Data Hub), mail is send out each Friday night.&lt;/p&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/7S8LbF6l&quot;&gt;https://trello.com/c/7S8LbF6l&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Topic:  End-to-end demo of Thoth’s Jupyter Notebook build pipeline for custom and internal repositories (hnalla)&lt;/h2&gt;&lt;p&gt;OpenShift-pipelines/TektonCD-pipeline based a build pipeline which on tag release of a github/gitlab repository containing the jupyter notebook, builds an image based on requirements of the jupyter notebook, for them to be comfortable import into jupyterhub. S2i build process is used for build procedure.&lt;/p&gt;&lt;p&gt;Cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://trello.com/c/SdXaRtET&quot;&gt;https://trello.com/c/SdXaRtET&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Sprint 39 - 2020-Jun-05 Find us on YouTube:  http://bit.ly/thoth-on-youtube Topic: How does the SrcOpsMetrics gather data? (dtuchyna) The…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/39.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/39.md</guid><content:encoded>&lt;h1&gt;Sprint 39 - 2020-Jun-05&lt;/h1&gt;&lt;p&gt;Find us on YouTube: &lt;a href=&quot;http://bit.ly/thoth-on-youtube&quot;&gt;http://bit.ly/thoth-on-youtube&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Topic: How does the SrcOpsMetrics gather data? (dtuchyna)&lt;/h2&gt;&lt;p&gt;The SrcOpsMetrics is currently able to gather the fundamental information about GitHub repository in order to calculate or visualize its Health Report. But how do we approach the data aggregation for multiple repositories present in organization that is inspected?&lt;/p&gt;&lt;p&gt;Cards or Issues:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/thoth-station/projects/13#card-39001930&quot;&gt;https://github.com/orgs/thoth-station/projects/13#card-39001930&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Topic: Thoth Datasets (fmurdaca)&lt;/h2&gt;&lt;p&gt;Thoth datasets are related to observations regarding software stacks (e.g. dependency tree, installability, performance, security, health) as part of Project Thoth. All these datasets can be found also here where they are described and explored to facilitate their use. All these observations are created with different components which are part of Project Thoth and stored in Thoth Knowledge Graph. All this knowledge is used by Thoth Adviser to provide advices on software stacks depending on User requirements.&lt;/p&gt;&lt;p&gt;Cards or Issues:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/datasets/issues/1&quot;&gt;https://github.com/thoth-station/datasets/issues/1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;References:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/thoth-station/datasets&quot;&gt;https://github.com/thoth-station/datasets&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.kaggle.com/thothstation/datasets&quot;&gt;https://www.kaggle.com/thothstation/datasets&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Thoth-Station Sprint Demos This directory contains show notes for the Thoth-Station sprint demo session. Right now, our sprints are two…]]></description><link>https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/README.md</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation/core/docs/sprint-demos/README.md</guid><content:encoded>&lt;h1&gt;Thoth-Station Sprint Demos&lt;/h1&gt;&lt;p&gt;This directory contains show notes for the Thoth-Station sprint demo session. Right now, our sprints are two weeks
long, and result in a demo session of about one hour. The sessions are recorded and published to
&lt;a href=&quot;http://bit.ly/thoth-on-youtube&quot;&gt;Thoth’s YouTube channel&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Sprint Demo Sessions&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/a282af99d83a0004b300de65eccf872b/35.md&quot;&gt;Sprint 35 - 2020-Apr-14&lt;/a&gt;
&lt;a href=&quot;/d88ebbb5fcca6340bed167486b0637dd/37.md&quot;&gt;Sprint 37 - 2020-May-08&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Thoth Station Help Page]]></description><link>https://thoth-station.ninja/help/</link><guid isPermaLink="false">https://thoth-station.ninja/help/</guid><content:encoded>&lt;h2&gt;Thoth Station Help Page&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Documentation Page]]></description><link>https://thoth-station.ninja/help/documentation</link><guid isPermaLink="false">https://thoth-station.ninja/help/documentation</guid><content:encoded>&lt;h3&gt;Documentation Page&lt;/h3&gt;</content:encoded></item></channel></rss>